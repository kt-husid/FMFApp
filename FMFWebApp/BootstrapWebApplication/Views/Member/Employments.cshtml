<script>
    function onEmploymentChange(arg) {
        employmentGridHandler.onChange(arg);
    @*var id = employmentGridHandler.currentItem().Id;
        $(".edit-action").data("action-name", "Edit?id=" + id + "&memberId=" + @Model.Id);
        $(".delete-action").data("action-name", "Delete?id=" + id + "&memberId=" + @Model.Id);*@
        }

    function onEmploymentDataBound(e) {
        employmentGridHandler.onDataBound(e);
    }

    function onEmploymentDataBinding(e) {
        employmentGridHandler.onDataBinding(e);
    }

    var employmentGridHandler;
</script>
@model BootstrapWebApplication.Models.Member

@(Html.Kendo().Grid<BootstrapWebApplication.Models.MemberEmploymentViewModel>()
    .Name("gridMemberEmployment")
    .Columns(columns =>
    {
        columns.Bound(p => p.Id).Hidden();
        columns.Bound(p => p.ShipName).ClientTemplate("<text><a href='/Ship/Details/#= ShipId #'>#= ShipCode # #= ShipName #</a></text>").Title(@Resources.Ship);
        columns.Bound(p => p.From).Format("{0:d}").Title(@Resources.From);
        columns.Bound(p => p.To).Format("{0:d}").Title(@Resources.To);
        columns.Bound(p => p.JobCode).Title(@Resources.Job).Width(100).Filterable(ftb => ftb.Cell(cell => cell.Operator("Contains")));
        columns.Bound(p => p.HolidayPay).Title(@Resources.HolidayPay).Format("{0:C}");
        columns.Bound(p => p.FinancialAid).Title(@Resources.FinancialAid).Format("{0:C}");
        columns.Bound(p => p.CrewSharePerCrewMember).Title(@Resources.TotalAmount).Format("{0:C}");
        
        //columns.Bound(p => p.KR_I).Title(@Resources.TotalAmount);
        //columns.Command(command =>
        //{
        //    command
        //        .Edit().Text(@Resources.Edit)
        //        .HtmlAttributes(new { @class = "btn-xs" });
        //    command
        //        .Destroy()
        //        .HtmlAttributes(new { @class = "hide" });
        //})
        //.Width(120);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Template(@<text>
            <div class="toolbar">
                @*@(Html.Kendo().Button()
                            .HtmlAttributes(new { @class = "create-action" })
                            .Content(@Resources.Create)
                            .Name("grid-create-button")
                            .
                            .Events(e => e.Click("createComment"))
                    )*@
                @*<button class="create-action k-button" data-toggle='modal' data-controller-name='Member' data-action-name='CreateMemberPayment?memberId=" + @Model.Id' data-model-name='Payment'>@Resources.Create</button>*@
                
            </div>
        </text>);
    })
    //.Reorderable(reorderable => reorderable.Columns(true))
    //.Editable(editable => editable.Mode(GridEditMode.PopUp))
    .Pageable(pageable => pageable
        .Messages(m=>
            m.ItemsPerPage(@Resources.ItemsPerPage)
            .First(@Resources.First)
            .Previous(@Resources.Previous)
            .Next(@Resources.Next)
            .Last(@Resources.Last)
            .Refresh(@Resources.Refresh)
            .Display("{0} - {1} " + @Resources.Of.ToLower() + " {2} " + @Resources.Items.ToLower())
            .Page(@Resources.Page)
            .Of(@Resources.Of)
            .Empty(@Resources.NoItemsToDisplay))
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
    //.Filterable(ftb => ftb.Mode(GridFilterMode.Row))
    .Sortable()
    .Scrollable()
    .Navigatable()
    //.Groupable()
    .Selectable()
    .Events(events => events.Change("onEmploymentChange").DataBound("onEmploymentDataBound").DataBinding("onEmploymentDataBinding"))
    .HtmlAttributes(new { style = "height:410px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .ServerOperation(true)
        //.Events(events => events.Error("error_handler"))
        .Model(model => model.Id(p => p.Id))
        //.Create(update => update.Action("MemberSignOn_Create", "Member"))
        .Read(read => read.Action("MemberEmployments_Read", "Member", new { id = @Model.Id }))
        //.Update(update => update.Action("MemberSignOn_Update", "Member"))
        //.Destroy(update => update.Action("MemberSignOn_Destroy", "Member"))
    )
)
<script>
    $(function () {

        employmentGridHandler = new GridHandler("#gridMemberEmployment");
        employmentGridHandler.onDoubleClick = function (item) {
            //navigate('/{Controller}/Details/' + item.Id);
        };
        employmentGridHandler.onItemDelete = function (item) {
            //console.log(item);
            $(".delete-action").filter(":visible").click();
        };

    });

    //function error_handler(e) {
    //    if (e.errors) {
    //        var message = "Errors:\n";
    //        $.each(e.errors, function (key, value) {
    //            if ('errors' in value) {
    //                $.each(value.errors, function () {
    //                    message += this + "\n";
    //                });
    //            }
    //        });
    //        alert(message);
    //    }
    //}
</script>