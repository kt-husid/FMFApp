@model BootstrapWebApplication.Models.TripTripLineCreateViewModel

@if (!@Request.IsAjaxRequest())
{
    ViewBag.Title = @BootstrapResources.Resources.Create;
    <h2>@BootstrapResources.Resources.Create</h2>
}
@{
    int tripId = -1;
    if (@Request != null)
    {
        //int.TryParse(@Request.QueryString["id"], out tripId);
        int.TryParse(@Request.QueryString["tripId"], out tripId);
    }
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @if (!@Request.IsAjaxRequest())
        {
            <h4>@Resources.TripLine</h4>
            <hr />
        }

        @Html.ValidationSummary(true)

        <input type="hidden" name="TripId" value="@tripId" />

        <div class="form-group">
            @Html.Label(@Resources.UseQuickInput, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBox("UseFastInput")
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.FishSpeciesId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                <input id="FishSpeciesCode" type="text" class="form-control" disabled="disabled" />
            </div>
            <div class="col-md-9">
                @Html.DropDownList("FishSpeciesId", null, htmlAttributes: new { @class = "form-control", @tabIndex = -1, @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.FishSpeciesId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Amount, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Amount, new { data_bind = "value: Amount", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitPrice, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.UnitPrice, new { data_bind = "value: Price", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalPrice, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.TotalPrice, new { data_bind = "value: KR", @class = "form-control", @tabIndex = -1 })
                @Html.ValidationMessageFor(model => model.TotalPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CompanyId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                <input id="CompanyCode" type="text" class="form-control" disabled="disabled" />
            </div>
            <div class="col-md-9">
                @Html.DropDownList("CompanyId", null, htmlAttributes: new { @class = "form-control", @tabIndex = -1, @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfLanding, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.DateOfLanding, new { @class = "datefield form-control" })
                @Html.ValidationMessageFor(model => model.DateOfLanding, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (!@Request.IsAjaxRequest())
        {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        }
    </div>
}
@if (!@Request.IsAjaxRequest())
{
    @Html.Partial("_BackToListPartial")

    @section Scripts {
        @Scripts.Render("~/js/jqueryval")
    }
}
<script>
    var companies,
        fishSpecies;

    var isQuickInput = false;

    function ViewModel() {
        var self = this;
        self.Amount = ko.observable(1);
        self.Price = ko.observable(13.08);
        self.KR = ko.pureComputed(function () {
            return self.Amount() * self.Price();
        }, self);
        return self;
    };
    var node = $('#modalCRUD').find(".modal-body")[0];
    // Remove the bindings before using 'applyBindings' again !
    // Catuion: It will also remove other bindings such as those made by jQuery (e.g. click events)
    ko.cleanNode(node);
    ko.applyBindings(new ViewModel(), node);

    $(function () {

        $("input[type=checkbox]").on("click", function () {
            isQuickInput = $("input:checked").length == 1;

            $("#CompanyCode").prop("disabled", isQuickInput);
            $("#CompanyId").prop("disabled", isQuickInput);
            $("#DateOfLanding").prop("disabled", isQuickInput);
        });

        $.getDataAsJson('/api/TripLine/GetTripLineCreateRelatedDataListViewModel', {
            'type': 'json'
        }, function (json) {
            //console.log(json);
            companies = Rx.Observable.fromArray(json.Companies);
            fishSpecies = Rx.Observable.fromArray(json.FishSpecies);
            $("#CompanyId, #CompanyCode, #FishSpeciesId, #FishSpeciesCode").prop('disabled', false);
            setTimeout(function () {

                AddInputCodeFilter('#CompanyCode', jobs, function (x, y) { return x.Code == y; }, function (z) { $('#CompanyId').val(z.Id); });
                AddDropdownFilter('#CompanyId', jobs, function (x, y) { return x.Id == y; }, function (z) { $('#CompanyCode').val(z.Code); });

                AddInputCodeFilter('#FishSpeciesCode', fishSpecies, function (x, y) { return x.Code == y; }, function (z) { $('#FishSpeciesId').val(z.Id); });
                AddDropdownFilter('#FishSpeciesId', fishSpecies, function (x, y) { return x.Id == y; }, function (z) { $('#FishSpeciesCode').val(z.Code); });


                $("#CompanyCode").prop('disabled', false).val('@Model.CompanyCode').keyup();
                $("#FishSpeciesCode").prop('disabled', false).val('@Model.FishSpeciesCode').keyup();
            }, 100);
        }, function (error) {
            console.log(error);
        });


        $("#DateOfLanding, #UnitPrice").keydown(function (e) {
            var id = $(this).attr("id")
            if (e.keyCode == 9) {
                //console.log(id);
                //console.log(isQuickInput);
                if (id == "UnitPrice" && isQuickInput) {
                    $("#FishSpeciesCode").focus();
                    e.preventDefault();
                }
                if (id == "DateOfLanding" && !isQuickInput) {
                    $("#FishSpeciesCode").focus();
                    e.preventDefault();
                }
            }
        });

    });
</script>