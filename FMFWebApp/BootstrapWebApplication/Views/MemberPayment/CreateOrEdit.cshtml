@model BootstrapWebApplication.Models.MemberPaymentCreateViewModel

@if (!@Request.IsAjaxRequest())
{
    ViewBag.Title = @BootstrapResources.Resources.Create;
    <h2>@Resources.Create</h2>
}
@{
    int id = -1;
    int memberId = -1;
    if (@Request != null)
    {
        int.TryParse(@Request.QueryString["id"], out id);
        int.TryParse(@Request.QueryString["memberId"], out memberId);
    }
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @if (!@Request.IsAjaxRequest())
        {
            <h4>@Resources.Comment</h4>
            <hr />
        }
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <input type="hidden" name="Id" value="@id" />
        <input type="hidden" name="MemberId" value="@memberId" />

        @*<div class="form-group">
            @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.HolidayPay, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HolidayPay, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HolidayPay, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MembershipPayment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MembershipPayment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MembershipPayment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.PaidOn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PaidOn, new { htmlAttributes = new { @class = "form-control datefield" } })
                @Html.ValidationMessageFor(model => model.PaidOn, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PaidById, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PaidById, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.PaidById, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BankAccountNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("MemberBankAccountId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BankAccountNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BankId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("BankId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BankId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BankAccountNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BankAccountNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BankAccountNumber, "", new { @class = "text-danger" })
            </div>
        </div>


        @if (!@Request.IsAjaxRequest())
        {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        }
    </div>
}
@if (!@Request.IsAjaxRequest())
{
    @Html.Partial("_BackToListPartial")

    @section Scripts {
        @Scripts.Render("~/js/jqueryval")
    }
}

<script>
    var bankAccounts;
    $(function () {

        $(".datefield").kendoDatePicker({
            format: "d"
        });

        setModalHeight(0.99);

        $("#MemberBankAccountId").prepend($('<option />').attr('value', '-1').text("@HttpUtility.HtmlDecode(@Resources.Unknown)"));

        $.getDataAsJson('/api/Member/BankAccounts', {
            'id': @memberId,
            'type': 'json'
        }, function (json) {
            bankAccounts = Rx.Observable.fromArray(json);
        }, function (error) {
            console.log(error);
        });

        $("#MemberBankAccountId").change(function () {
            if(bankAccounts == undefined) {
                return false;
            }
            var id = $(this).val();
            var source = bankAccounts.filter(function (x, idx, obs) {
                return x.Id == id;
            });
            console.log(source);
            var subscription = source.subscribe(
            function (x) {
                println(x);
                $('#BankId').val(x.BankId);
                $('#BankAccountNumber').val(x.AccountNumber);
            },
            function (err) {
                console.log('Error: %s', err);
            },
            function () {
                //console.log('Completed');
            });
        });
    });
</script>